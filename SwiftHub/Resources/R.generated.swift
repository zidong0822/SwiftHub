//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    
    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif
    
    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    #endif
    
    fileprivate init() {}
  }
  #endif
  
  /// This `R.image` struct is generated, and contains static references to 11 images.
  struct image {
    /// Image `icon_cell_disclosure`.
    static let icon_cell_disclosure = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_cell_disclosure")
    /// Image `icon_tabbar_activity`.
    static let icon_tabbar_activity = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_tabbar_activity")
    /// Image `icon_tabbar_login`.
    static let icon_tabbar_login = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_tabbar_login")
    /// Image `icon_tabbar_news`.
    static let icon_tabbar_news = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_tabbar_news")
    /// Image `icon_tabbar_profile`.
    static let icon_tabbar_profile = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_tabbar_profile")
    /// Image `icon_tabbar_search`.
    static let icon_tabbar_search = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_tabbar_search")
    /// Image `icon_tabbar_settings`.
    static let icon_tabbar_settings = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_tabbar_settings")
    /// Image `icon_whatsnew_github`.
    static let icon_whatsnew_github = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_whatsnew_github")
    /// Image `icon_whatsnew_theme`.
    static let icon_whatsnew_theme = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_whatsnew_theme")
    /// Image `icon_whatsnew_trending`.
    static let icon_whatsnew_trending = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_whatsnew_trending")
    /// Image `icon_whatsnew_whats_new`.
    static let icon_whatsnew_whats_new = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_whatsnew_whats_new")
    
    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_cell_disclosure", bundle: ..., traitCollection: ...)`
    static func icon_cell_disclosure(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_cell_disclosure, compatibleWith: traitCollection)
    }
    #endif
    
    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_tabbar_activity", bundle: ..., traitCollection: ...)`
    static func icon_tabbar_activity(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_tabbar_activity, compatibleWith: traitCollection)
    }
    #endif
    
    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_tabbar_login", bundle: ..., traitCollection: ...)`
    static func icon_tabbar_login(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_tabbar_login, compatibleWith: traitCollection)
    }
    #endif
    
    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_tabbar_news", bundle: ..., traitCollection: ...)`
    static func icon_tabbar_news(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_tabbar_news, compatibleWith: traitCollection)
    }
    #endif
    
    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_tabbar_profile", bundle: ..., traitCollection: ...)`
    static func icon_tabbar_profile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_tabbar_profile, compatibleWith: traitCollection)
    }
    #endif
    
    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_tabbar_search", bundle: ..., traitCollection: ...)`
    static func icon_tabbar_search(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_tabbar_search, compatibleWith: traitCollection)
    }
    #endif
    
    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_tabbar_settings", bundle: ..., traitCollection: ...)`
    static func icon_tabbar_settings(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_tabbar_settings, compatibleWith: traitCollection)
    }
    #endif
    
    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_whatsnew_github", bundle: ..., traitCollection: ...)`
    static func icon_whatsnew_github(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_whatsnew_github, compatibleWith: traitCollection)
    }
    #endif
    
    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_whatsnew_theme", bundle: ..., traitCollection: ...)`
    static func icon_whatsnew_theme(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_whatsnew_theme, compatibleWith: traitCollection)
    }
    #endif
    
    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_whatsnew_trending", bundle: ..., traitCollection: ...)`
    static func icon_whatsnew_trending(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_whatsnew_trending, compatibleWith: traitCollection)
    }
    #endif
    
    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_whatsnew_whats_new", bundle: ..., traitCollection: ...)`
    static func icon_whatsnew_whats_new(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_whatsnew_whats_new, compatibleWith: traitCollection)
    }
    #endif
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 1 nibs.
  struct nib {
    /// Nib `SettingCell`.
    static let settingCell = _R.nib._SettingCell()
    
    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SettingCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.settingCell) instead")
    static func settingCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.settingCell)
    }
    #endif
    
    static func settingCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SettingCell? {
      return R.nib.settingCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SettingCell
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 1 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `SettingCell`.
    static let settingCell: Rswift.ReuseIdentifier<SettingCell> = Rswift.ReuseIdentifier(identifier: "SettingCell")
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 3 localization tables.
  struct string {
    /// This `R.string.launchScreen` struct is generated, and contains static references to 0 localization keys.
    struct launchScreen {
      fileprivate init() {}
    }
    
    /// This `R.string.localizable` struct is generated, and contains static references to 62 localization keys.
    struct localizable {
      /// en translation: %@ repositories
      /// 
      /// Locales: en
      static let searchRepositoriesTotalCountTitle = Rswift.StringResource(key: "Search.RepositoriesTotalCount.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: %@ users
      /// 
      /// Locales: en
      static let searchUsersTotalCountTitle = Rswift.StringResource(key: "Search.UsersTotalCount.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Account
      /// 
      /// Locales: en
      static let settingsAccountSectionTitle = Rswift.StringResource(key: "Settings.AccountSection.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Acknowledgements
      /// 
      /// Locales: en
      static let settingsAcknowledgementsTitle = Rswift.StringResource(key: "Settings.Acknowledgements.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Activities
      /// 
      /// Locales: en, zh-Hans
      static let homeTabBarNotificationsTitle = Rswift.StringResource(key: "Home.TabBar.Notifications.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Ads enabled
      /// 
      /// Locales: en
      static let settingsBannerTitle = Rswift.StringResource(key: "Settings.Banner.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Are you sure want to log out from SwiftHub?
      /// 
      /// Locales: en
      static let settingsLogoutAlertMessage = Rswift.StringResource(key: "Settings.Logout.Alert.Message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Best match
      /// 
      /// Locales: en
      static let searchSortRepositoriesBestMatchTitle = Rswift.StringResource(key: "Search.SortRepositories.BestMatch.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Best match
      /// 
      /// Locales: en
      static let searchSortUsersBestMatchTitle = Rswift.StringResource(key: "Search.SortUsers.BestMatch.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Cache Successfully Cleared
      /// 
      /// Locales: en
      static let settingsRemoveCacheAlertSuccessMessage = Rswift.StringResource(key: "Settings.RemoveCache.Alert.SuccessMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Color theme
      /// 
      /// Locales: en
      static let settingsThemeTitle = Rswift.StringResource(key: "Settings.Theme.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Continue
      /// 
      /// Locales: en
      static let whatsNewCompletionButtonTitle = Rswift.StringResource(key: "WhatsNew.CompletionButton.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Daily
      /// 
      /// Locales: en
      static let searchDailySegmentTitle = Rswift.StringResource(key: "Search.DailySegment.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Events
      /// 
      /// Locales: en, zh-Hans
      static let homeTabBarEventsTitle = Rswift.StringResource(key: "Home.TabBar.Events.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Fewest followers
      /// 
      /// Locales: en
      static let searchSortUsersFewestFollowersTitle = Rswift.StringResource(key: "Search.SortUsers.FewestFollowers.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Fewest forks
      /// 
      /// Locales: en
      static let searchSortRepositoriesFewestForksTitle = Rswift.StringResource(key: "Search.SortRepositories.FewestForks.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Fewest repositories
      /// 
      /// Locales: en
      static let searchSortUsersFewestRepositoriesTitle = Rswift.StringResource(key: "Search.SortUsers.FewestRepositories.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Fewest stars
      /// 
      /// Locales: en
      static let searchSortRepositoriesFewestStarsTitle = Rswift.StringResource(key: "Search.SortRepositories.FewestStars.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Global Search
      /// 
      /// Locales: en
      static let searchSearchBarPlaceholder = Rswift.StringResource(key: "Search.SearchBar.Placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Invite friends
      /// 
      /// Locales: en
      static let settingsContactsTitle = Rswift.StringResource(key: "Settings.Contacts.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Language
      /// 
      /// Locales: en
      static let settingsLanguageTitle = Rswift.StringResource(key: "Settings.Language.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Last recently updated
      /// 
      /// Locales: en
      static let searchSortRepositoriesLastRecentlyUpdatedTitle = Rswift.StringResource(key: "Search.SortRepositories.LastRecentlyUpdated.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Least recently joined
      /// 
      /// Locales: en
      static let searchSortUsersLeastRecentlyJoinedTitle = Rswift.StringResource(key: "Search.SortUsers.LeastRecentlyJoined.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Log Out
      /// 
      /// Locales: en
      static let settingsLogOutTitle = Rswift.StringResource(key: "Settings.LogOut.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Login
      /// 
      /// Locales: en, zh-Hans
      static let homeTabBarLoginTitle = Rswift.StringResource(key: "Home.TabBar.Login.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Logout
      /// 
      /// Locales: en
      static let settingsLogoutAlertConfirmButtonTitle = Rswift.StringResource(key: "Settings.Logout.Alert.ConfirmButton.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Monthly
      /// 
      /// Locales: en
      static let searchMonthlySegmentTitle = Rswift.StringResource(key: "Search.MonthlySegment.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Most followers
      /// 
      /// Locales: en
      static let searchSortUsersMostFollowersTitle = Rswift.StringResource(key: "Search.SortUsers.MostFollowers.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Most forks
      /// 
      /// Locales: en
      static let searchSortRepositoriesMostForksTitle = Rswift.StringResource(key: "Search.SortRepositories.MostForks.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Most recently joined
      /// 
      /// Locales: en
      static let searchSortUsersMostRecentlyJoinedTitle = Rswift.StringResource(key: "Search.SortUsers.MostRecentlyJoined.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Most repositories
      /// 
      /// Locales: en
      static let searchSortUsersMostRepositoriesTitle = Rswift.StringResource(key: "Search.SortUsers.MostRepositories.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Most stars
      /// 
      /// Locales: en
      static let searchSortRepositoriesMostStarsTitle = Rswift.StringResource(key: "Search.SortRepositories.MostStars.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: My Projects
      /// 
      /// Locales: en
      static let settingsProjectsSectionTitle = Rswift.StringResource(key: "Settings.ProjectsSection.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Night mode
      /// 
      /// Locales: en
      static let settingsNightModeTitle = Rswift.StringResource(key: "Settings.NightMode.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Open Source
      /// 
      /// Locales: en
      static let whatsNewItem3Title = Rswift.StringResource(key: "WhatsNew.Item3.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Preferences
      /// 
      /// Locales: en
      static let settingsPreferencesSectionTitle = Rswift.StringResource(key: "Settings.PreferencesSection.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Profile
      /// 
      /// Locales: en, zh-Hans
      static let homeTabBarProfileTitle = Rswift.StringResource(key: "Home.TabBar.Profile.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Recently updated
      /// 
      /// Locales: en
      static let searchSortRepositoriesRecentlyUpdatedTitle = Rswift.StringResource(key: "Search.SortRepositories.RecentlyUpdated.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Remove cache
      /// 
      /// Locales: en
      static let settingsRemoveCacheTitle = Rswift.StringResource(key: "Settings.RemoveCache.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Repositories
      /// 
      /// Locales: en
      static let searchRepositoriesSegmentTitle = Rswift.StringResource(key: "Search.RepositoriesSegment.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Search
      /// 
      /// Locales: en
      static let searchSearchSectionTitle = Rswift.StringResource(key: "Search.SearchSection.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Search
      /// 
      /// Locales: en
      static let searchSearchSegmentTitle = Rswift.StringResource(key: "Search.SearchSegment.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Search
      /// 
      /// Locales: en, zh-Hans
      static let homeTabBarSearchTitle = Rswift.StringResource(key: "Home.TabBar.Search.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Search results for %@
      /// 
      /// Locales: en
      static let searchSearchSectionWithLanguageTitle = Rswift.StringResource(key: "Search.SearchSectionWithLanguage.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: See what the GitHub community is most excited about today
      /// 
      /// Locales: en
      static let whatsNewItem4Subtitle = Rswift.StringResource(key: "WhatsNew.Item4.Subtitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Settings
      /// 
      /// Locales: en
      static let settingsNavigationTitle = Rswift.StringResource(key: "Settings.Navigation.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Settings
      /// 
      /// Locales: en, zh-Hans
      static let homeTabBarSettingsTitle = Rswift.StringResource(key: "Home.TabBar.Settings.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Support
      /// 
      /// Locales: en
      static let settingsSupportSectionTitle = Rswift.StringResource(key: "Settings.SupportSection.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: SwiftHub is fully open source Stars are very welcomed ★
      /// 
      /// Locales: en
      static let whatsNewItem3Subtitle = Rswift.StringResource(key: "WhatsNew.Item3.Subtitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Themes
      /// 
      /// Locales: en
      static let whatsNewItem2Title = Rswift.StringResource(key: "WhatsNew.Item2.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Trending
      /// 
      /// Locales: en
      static let searchTrendingSectionTitle = Rswift.StringResource(key: "Search.TrendingSection.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Trending
      /// 
      /// Locales: en
      static let searchTrendingSegmentTitle = Rswift.StringResource(key: "Search.TrendingSegment.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Trending
      /// 
      /// Locales: en
      static let whatsNewItem4Title = Rswift.StringResource(key: "WhatsNew.Item4.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Trending results for %@
      /// 
      /// Locales: en
      static let searchTrendingSectionWithLanguageTitle = Rswift.StringResource(key: "Search.TrendingSectionWithLanguage.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Users
      /// 
      /// Locales: en
      static let searchUsersSegmentTitle = Rswift.StringResource(key: "Search.UsersSegment.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: View on GitHub
      /// 
      /// Locales: en
      static let whatsNewDetailButtonTitle = Rswift.StringResource(key: "WhatsNew.DetailButton.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Weekly
      /// 
      /// Locales: en
      static let searchWeeklySegmentTitle = Rswift.StringResource(key: "Search.WeeklySegment.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Whats New
      /// 
      /// Locales: en
      static let settingsWhatsNewTitle = Rswift.StringResource(key: "Settings.WhatsNew.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Whats New
      /// 
      /// Locales: en
      static let whatsNewTitle = Rswift.StringResource(key: "WhatsNew.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: WhatsNewKit
      /// 
      /// Locales: en
      static let whatsNewItem1Title = Rswift.StringResource(key: "WhatsNew.Item1.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: WhatsNewKit enables you to easily showcase your awesome new app features
      /// 
      /// Locales: en
      static let whatsNewItem1Subtitle = Rswift.StringResource(key: "WhatsNew.Item1.Subtitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: You can apply different themes with Light and Dark modes
      /// 
      /// Locales: en
      static let whatsNewItem2Subtitle = Rswift.StringResource(key: "WhatsNew.Item2.Subtitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      
      /// en translation: %@ repositories
      /// 
      /// Locales: en
      static func searchRepositoriesTotalCountTitle(_ value1: String) -> String {
        return String(format: NSLocalizedString("Search.RepositoriesTotalCount.Title", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: %@ users
      /// 
      /// Locales: en
      static func searchUsersTotalCountTitle(_ value1: String) -> String {
        return String(format: NSLocalizedString("Search.UsersTotalCount.Title", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: Account
      /// 
      /// Locales: en
      static func settingsAccountSectionTitle(_: Void = ()) -> String {
        return NSLocalizedString("Settings.AccountSection.Title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Acknowledgements
      /// 
      /// Locales: en
      static func settingsAcknowledgementsTitle(_: Void = ()) -> String {
        return NSLocalizedString("Settings.Acknowledgements.Title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Activities
      /// 
      /// Locales: en, zh-Hans
      static func homeTabBarNotificationsTitle(_: Void = ()) -> String {
        return NSLocalizedString("Home.TabBar.Notifications.Title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Ads enabled
      /// 
      /// Locales: en
      static func settingsBannerTitle(_: Void = ()) -> String {
        return NSLocalizedString("Settings.Banner.Title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Are you sure want to log out from SwiftHub?
      /// 
      /// Locales: en
      static func settingsLogoutAlertMessage(_: Void = ()) -> String {
        return NSLocalizedString("Settings.Logout.Alert.Message", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Best match
      /// 
      /// Locales: en
      static func searchSortRepositoriesBestMatchTitle(_: Void = ()) -> String {
        return NSLocalizedString("Search.SortRepositories.BestMatch.Title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Best match
      /// 
      /// Locales: en
      static func searchSortUsersBestMatchTitle(_: Void = ()) -> String {
        return NSLocalizedString("Search.SortUsers.BestMatch.Title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Cache Successfully Cleared
      /// 
      /// Locales: en
      static func settingsRemoveCacheAlertSuccessMessage(_: Void = ()) -> String {
        return NSLocalizedString("Settings.RemoveCache.Alert.SuccessMessage", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Color theme
      /// 
      /// Locales: en
      static func settingsThemeTitle(_: Void = ()) -> String {
        return NSLocalizedString("Settings.Theme.Title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Continue
      /// 
      /// Locales: en
      static func whatsNewCompletionButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("WhatsNew.CompletionButton.Title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Daily
      /// 
      /// Locales: en
      static func searchDailySegmentTitle(_: Void = ()) -> String {
        return NSLocalizedString("Search.DailySegment.Title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Events
      /// 
      /// Locales: en, zh-Hans
      static func homeTabBarEventsTitle(_: Void = ()) -> String {
        return NSLocalizedString("Home.TabBar.Events.Title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Fewest followers
      /// 
      /// Locales: en
      static func searchSortUsersFewestFollowersTitle(_: Void = ()) -> String {
        return NSLocalizedString("Search.SortUsers.FewestFollowers.Title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Fewest forks
      /// 
      /// Locales: en
      static func searchSortRepositoriesFewestForksTitle(_: Void = ()) -> String {
        return NSLocalizedString("Search.SortRepositories.FewestForks.Title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Fewest repositories
      /// 
      /// Locales: en
      static func searchSortUsersFewestRepositoriesTitle(_: Void = ()) -> String {
        return NSLocalizedString("Search.SortUsers.FewestRepositories.Title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Fewest stars
      /// 
      /// Locales: en
      static func searchSortRepositoriesFewestStarsTitle(_: Void = ()) -> String {
        return NSLocalizedString("Search.SortRepositories.FewestStars.Title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Global Search
      /// 
      /// Locales: en
      static func searchSearchBarPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("Search.SearchBar.Placeholder", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Invite friends
      /// 
      /// Locales: en
      static func settingsContactsTitle(_: Void = ()) -> String {
        return NSLocalizedString("Settings.Contacts.Title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Language
      /// 
      /// Locales: en
      static func settingsLanguageTitle(_: Void = ()) -> String {
        return NSLocalizedString("Settings.Language.Title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Last recently updated
      /// 
      /// Locales: en
      static func searchSortRepositoriesLastRecentlyUpdatedTitle(_: Void = ()) -> String {
        return NSLocalizedString("Search.SortRepositories.LastRecentlyUpdated.Title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Least recently joined
      /// 
      /// Locales: en
      static func searchSortUsersLeastRecentlyJoinedTitle(_: Void = ()) -> String {
        return NSLocalizedString("Search.SortUsers.LeastRecentlyJoined.Title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Log Out
      /// 
      /// Locales: en
      static func settingsLogOutTitle(_: Void = ()) -> String {
        return NSLocalizedString("Settings.LogOut.Title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Login
      /// 
      /// Locales: en, zh-Hans
      static func homeTabBarLoginTitle(_: Void = ()) -> String {
        return NSLocalizedString("Home.TabBar.Login.Title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Logout
      /// 
      /// Locales: en
      static func settingsLogoutAlertConfirmButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("Settings.Logout.Alert.ConfirmButton.Title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Monthly
      /// 
      /// Locales: en
      static func searchMonthlySegmentTitle(_: Void = ()) -> String {
        return NSLocalizedString("Search.MonthlySegment.Title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Most followers
      /// 
      /// Locales: en
      static func searchSortUsersMostFollowersTitle(_: Void = ()) -> String {
        return NSLocalizedString("Search.SortUsers.MostFollowers.Title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Most forks
      /// 
      /// Locales: en
      static func searchSortRepositoriesMostForksTitle(_: Void = ()) -> String {
        return NSLocalizedString("Search.SortRepositories.MostForks.Title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Most recently joined
      /// 
      /// Locales: en
      static func searchSortUsersMostRecentlyJoinedTitle(_: Void = ()) -> String {
        return NSLocalizedString("Search.SortUsers.MostRecentlyJoined.Title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Most repositories
      /// 
      /// Locales: en
      static func searchSortUsersMostRepositoriesTitle(_: Void = ()) -> String {
        return NSLocalizedString("Search.SortUsers.MostRepositories.Title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Most stars
      /// 
      /// Locales: en
      static func searchSortRepositoriesMostStarsTitle(_: Void = ()) -> String {
        return NSLocalizedString("Search.SortRepositories.MostStars.Title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: My Projects
      /// 
      /// Locales: en
      static func settingsProjectsSectionTitle(_: Void = ()) -> String {
        return NSLocalizedString("Settings.ProjectsSection.Title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Night mode
      /// 
      /// Locales: en
      static func settingsNightModeTitle(_: Void = ()) -> String {
        return NSLocalizedString("Settings.NightMode.Title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Open Source
      /// 
      /// Locales: en
      static func whatsNewItem3Title(_: Void = ()) -> String {
        return NSLocalizedString("WhatsNew.Item3.Title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Preferences
      /// 
      /// Locales: en
      static func settingsPreferencesSectionTitle(_: Void = ()) -> String {
        return NSLocalizedString("Settings.PreferencesSection.Title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Profile
      /// 
      /// Locales: en, zh-Hans
      static func homeTabBarProfileTitle(_: Void = ()) -> String {
        return NSLocalizedString("Home.TabBar.Profile.Title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Recently updated
      /// 
      /// Locales: en
      static func searchSortRepositoriesRecentlyUpdatedTitle(_: Void = ()) -> String {
        return NSLocalizedString("Search.SortRepositories.RecentlyUpdated.Title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Remove cache
      /// 
      /// Locales: en
      static func settingsRemoveCacheTitle(_: Void = ()) -> String {
        return NSLocalizedString("Settings.RemoveCache.Title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Repositories
      /// 
      /// Locales: en
      static func searchRepositoriesSegmentTitle(_: Void = ()) -> String {
        return NSLocalizedString("Search.RepositoriesSegment.Title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Search
      /// 
      /// Locales: en
      static func searchSearchSectionTitle(_: Void = ()) -> String {
        return NSLocalizedString("Search.SearchSection.Title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Search
      /// 
      /// Locales: en
      static func searchSearchSegmentTitle(_: Void = ()) -> String {
        return NSLocalizedString("Search.SearchSegment.Title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Search
      /// 
      /// Locales: en, zh-Hans
      static func homeTabBarSearchTitle(_: Void = ()) -> String {
        return NSLocalizedString("Home.TabBar.Search.Title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Search results for %@
      /// 
      /// Locales: en
      static func searchSearchSectionWithLanguageTitle(_ value1: String) -> String {
        return String(format: NSLocalizedString("Search.SearchSectionWithLanguage.Title", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: See what the GitHub community is most excited about today
      /// 
      /// Locales: en
      static func whatsNewItem4Subtitle(_: Void = ()) -> String {
        return NSLocalizedString("WhatsNew.Item4.Subtitle", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Settings
      /// 
      /// Locales: en
      static func settingsNavigationTitle(_: Void = ()) -> String {
        return NSLocalizedString("Settings.Navigation.Title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Settings
      /// 
      /// Locales: en, zh-Hans
      static func homeTabBarSettingsTitle(_: Void = ()) -> String {
        return NSLocalizedString("Home.TabBar.Settings.Title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Support
      /// 
      /// Locales: en
      static func settingsSupportSectionTitle(_: Void = ()) -> String {
        return NSLocalizedString("Settings.SupportSection.Title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: SwiftHub is fully open source Stars are very welcomed ★
      /// 
      /// Locales: en
      static func whatsNewItem3Subtitle(_: Void = ()) -> String {
        return NSLocalizedString("WhatsNew.Item3.Subtitle", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Themes
      /// 
      /// Locales: en
      static func whatsNewItem2Title(_: Void = ()) -> String {
        return NSLocalizedString("WhatsNew.Item2.Title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Trending
      /// 
      /// Locales: en
      static func searchTrendingSectionTitle(_: Void = ()) -> String {
        return NSLocalizedString("Search.TrendingSection.Title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Trending
      /// 
      /// Locales: en
      static func searchTrendingSegmentTitle(_: Void = ()) -> String {
        return NSLocalizedString("Search.TrendingSegment.Title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Trending
      /// 
      /// Locales: en
      static func whatsNewItem4Title(_: Void = ()) -> String {
        return NSLocalizedString("WhatsNew.Item4.Title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Trending results for %@
      /// 
      /// Locales: en
      static func searchTrendingSectionWithLanguageTitle(_ value1: String) -> String {
        return String(format: NSLocalizedString("Search.TrendingSectionWithLanguage.Title", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: Users
      /// 
      /// Locales: en
      static func searchUsersSegmentTitle(_: Void = ()) -> String {
        return NSLocalizedString("Search.UsersSegment.Title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: View on GitHub
      /// 
      /// Locales: en
      static func whatsNewDetailButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("WhatsNew.DetailButton.Title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Weekly
      /// 
      /// Locales: en
      static func searchWeeklySegmentTitle(_: Void = ()) -> String {
        return NSLocalizedString("Search.WeeklySegment.Title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Whats New
      /// 
      /// Locales: en
      static func settingsWhatsNewTitle(_: Void = ()) -> String {
        return NSLocalizedString("Settings.WhatsNew.Title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Whats New
      /// 
      /// Locales: en
      static func whatsNewTitle(_: Void = ()) -> String {
        return NSLocalizedString("WhatsNew.Title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: WhatsNewKit
      /// 
      /// Locales: en
      static func whatsNewItem1Title(_: Void = ()) -> String {
        return NSLocalizedString("WhatsNew.Item1.Title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: WhatsNewKit enables you to easily showcase your awesome new app features
      /// 
      /// Locales: en
      static func whatsNewItem1Subtitle(_: Void = ()) -> String {
        return NSLocalizedString("WhatsNew.Item1.Subtitle", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: You can apply different themes with Light and Dark modes
      /// 
      /// Locales: en
      static func whatsNewItem2Subtitle(_: Void = ()) -> String {
        return NSLocalizedString("WhatsNew.Item2.Subtitle", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    /// This `R.string.main` struct is generated, and contains static references to 0 localization keys.
    struct main {
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }
  
  #if os(iOS) || os(tvOS)
  struct nib {
    struct _SettingCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = SettingCell
      
      let bundle = R.hostingBundle
      let identifier = "SettingCell"
      let name = "SettingCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SettingCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SettingCell
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  #endif
  
  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try main.validate()
      #endif
    }
    
    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    #endif
    
    #if os(iOS) || os(tvOS)
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = ViewController
      
      let bundle = R.hostingBundle
      let name = "Main"
      
      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    #endif
    
    fileprivate init() {}
  }
  #endif
  
  fileprivate init() {}
}
